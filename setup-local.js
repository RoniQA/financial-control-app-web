#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üöÄ Configurando Nova Agro para desenvolvimento local...\n');

// Verificar se Node.js est√° instalado
try {
  const nodeVersion = execSync('node --version', { encoding: 'utf8' }).trim();
  console.log(`‚úÖ Node.js ${nodeVersion} encontrado`);
} catch (error) {
  console.error('‚ùå Node.js n√£o encontrado. Instale Node.js 18+ primeiro.');
  process.exit(1);
}

// Verificar se PostgreSQL est√° rodando
console.log('\nüîç Verificando PostgreSQL...');
try {
  execSync('psql --version', { encoding: 'utf8' });
  console.log('‚úÖ PostgreSQL encontrado');
} catch (error) {
  console.log('‚ö†Ô∏è  PostgreSQL n√£o encontrado. Instale PostgreSQL primeiro.');
  console.log('   Download: https://www.postgresql.org/download/');
}

// Verificar se Redis est√° rodando
console.log('\nüîç Verificando Redis...');
try {
  execSync('redis-cli --version', { encoding: 'utf8' });
  console.log('‚úÖ Redis encontrado');
} catch (error) {
  console.log('‚ö†Ô∏è  Redis n√£o encontrado. Instale Redis primeiro.');
  console.log('   Download: https://redis.io/download');
}

// Criar arquivo .env para o backend se n√£o existir
const backendEnvPath = path.join(__dirname, 'apps', 'backend', '.env');
const backendEnvExamplePath = path.join(__dirname, 'apps', 'backend', 'env.example');

if (!fs.existsSync(backendEnvPath)) {
  if (fs.existsSync(backendEnvExamplePath)) {
    fs.copyFileSync(backendEnvExamplePath, backendEnvPath);
    console.log('\n‚úÖ Arquivo .env criado para o backend');
  } else {
    console.log('\n‚ö†Ô∏è  Arquivo env.example n√£o encontrado no backend');
  }
} else {
  console.log('\n‚úÖ Arquivo .env j√° existe no backend');
}

// Criar arquivo .env para o frontend se n√£o existir
const frontendEnvPath = path.join(__dirname, 'apps', 'frontend', '.env');
const frontendEnvExamplePath = path.join(__dirname, 'apps', 'frontend', '.env.example');

if (!fs.existsSync(frontendEnvPath)) {
  if (fs.existsSync(frontendEnvExamplePath)) {
    fs.copyFileSync(frontendEnvExamplePath, frontendEnvPath);
    console.log('‚úÖ Arquivo .env criado para o frontend');
  } else {
    console.log('‚ö†Ô∏è  Arquivo .env.example n√£o encontrado no frontend');
  }
} else {
  console.log('‚úÖ Arquivo .env j√° existe no frontend');
}

console.log('\nüìã Pr√≥ximos passos:');
console.log('1. Configure as vari√°veis de ambiente nos arquivos .env');
console.log('2. Crie o banco de dados PostgreSQL:');
console.log('   createdb nova_agro');
console.log('3. Execute as migra√ß√µes:');
console.log('   npm run db:migrate');
console.log('4. Popule com dados de exemplo:');
console.log('   npm run db:seed');
console.log('5. Inicie o desenvolvimento:');
console.log('   npm run dev');

console.log('\nüéâ Configura√ß√£o conclu√≠da!');

