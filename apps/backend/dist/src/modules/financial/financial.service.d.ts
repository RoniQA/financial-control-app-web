import { PrismaService } from '../../database/prisma.service';
import { CreatePaymentDto } from './dto/create-payment.dto';
import { UpdatePaymentDto } from './dto/update-payment.dto';
export declare class FinancialService {
    private readonly prisma;
    constructor(prisma: PrismaService);
    createPayment(createPaymentDto: CreatePaymentDto): Promise<{
        partner: {
            id: string;
            type: string;
            createdAt: Date;
            updatedAt: Date;
            deletedAt: Date | null;
            companyId: string;
            name: string;
            document: string;
            ie: string | null;
            im: string | null;
            email: string | null;
            phone: string | null;
            address: import("@prisma/client/runtime/library").JsonValue | null;
            isActive: boolean;
        };
        user: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            deletedAt: Date | null;
            companyId: string;
            email: string;
            phone: string | null;
            isActive: boolean;
            password: string;
            firstName: string;
            lastName: string;
            lastLogin: Date | null;
            failedLogins: number;
            lockedUntil: Date | null;
            mfaEnabled: boolean;
            mfaSecret: string | null;
        };
        invoice: {
            number: string;
            id: string;
            type: string;
            status: string;
            partnerId: string | null;
            userId: string;
            total: number;
            tax: number;
            notes: string | null;
            createdAt: Date;
            updatedAt: Date;
            deletedAt: Date | null;
            companyId: string;
            dueDate: Date | null;
            paidAt: Date | null;
            xmlContent: string | null;
            xmlKey: string | null;
            orderId: string | null;
        };
        bankAccount: {
            id: string;
            type: string;
            createdAt: Date;
            updatedAt: Date;
            companyId: string;
            name: string;
            isActive: boolean;
            bank: string;
            agency: string;
            account: string;
            balance: number;
        };
    } & {
        id: string;
        type: string;
        partnerId: string | null;
        userId: string;
        createdAt: Date;
        updatedAt: Date;
        companyId: string;
        description: string | null;
        method: string;
        amount: number;
        reference: string | null;
        referenceId: string | null;
        dueDate: Date | null;
        paidAt: Date | null;
        fees: number;
        invoiceId: string | null;
        bankAccountId: string | null;
    }>;
    findAllPayments(companyId: string, filters?: any): Promise<({
        partner: {
            id: string;
            type: string;
            createdAt: Date;
            updatedAt: Date;
            deletedAt: Date | null;
            companyId: string;
            name: string;
            document: string;
            ie: string | null;
            im: string | null;
            email: string | null;
            phone: string | null;
            address: import("@prisma/client/runtime/library").JsonValue | null;
            isActive: boolean;
        };
        user: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            deletedAt: Date | null;
            companyId: string;
            email: string;
            phone: string | null;
            isActive: boolean;
            password: string;
            firstName: string;
            lastName: string;
            lastLogin: Date | null;
            failedLogins: number;
            lockedUntil: Date | null;
            mfaEnabled: boolean;
            mfaSecret: string | null;
        };
        invoice: {
            number: string;
            id: string;
            type: string;
            status: string;
            partnerId: string | null;
            userId: string;
            total: number;
            tax: number;
            notes: string | null;
            createdAt: Date;
            updatedAt: Date;
            deletedAt: Date | null;
            companyId: string;
            dueDate: Date | null;
            paidAt: Date | null;
            xmlContent: string | null;
            xmlKey: string | null;
            orderId: string | null;
        };
        bankAccount: {
            id: string;
            type: string;
            createdAt: Date;
            updatedAt: Date;
            companyId: string;
            name: string;
            isActive: boolean;
            bank: string;
            agency: string;
            account: string;
            balance: number;
        };
    } & {
        id: string;
        type: string;
        partnerId: string | null;
        userId: string;
        createdAt: Date;
        updatedAt: Date;
        companyId: string;
        description: string | null;
        method: string;
        amount: number;
        reference: string | null;
        referenceId: string | null;
        dueDate: Date | null;
        paidAt: Date | null;
        fees: number;
        invoiceId: string | null;
        bankAccountId: string | null;
    })[]>;
    findPaymentById(id: string): Promise<{
        partner: {
            id: string;
            type: string;
            createdAt: Date;
            updatedAt: Date;
            deletedAt: Date | null;
            companyId: string;
            name: string;
            document: string;
            ie: string | null;
            im: string | null;
            email: string | null;
            phone: string | null;
            address: import("@prisma/client/runtime/library").JsonValue | null;
            isActive: boolean;
        };
        user: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            deletedAt: Date | null;
            companyId: string;
            email: string;
            phone: string | null;
            isActive: boolean;
            password: string;
            firstName: string;
            lastName: string;
            lastLogin: Date | null;
            failedLogins: number;
            lockedUntil: Date | null;
            mfaEnabled: boolean;
            mfaSecret: string | null;
        };
        invoice: {
            number: string;
            id: string;
            type: string;
            status: string;
            partnerId: string | null;
            userId: string;
            total: number;
            tax: number;
            notes: string | null;
            createdAt: Date;
            updatedAt: Date;
            deletedAt: Date | null;
            companyId: string;
            dueDate: Date | null;
            paidAt: Date | null;
            xmlContent: string | null;
            xmlKey: string | null;
            orderId: string | null;
        };
        bankAccount: {
            id: string;
            type: string;
            createdAt: Date;
            updatedAt: Date;
            companyId: string;
            name: string;
            isActive: boolean;
            bank: string;
            agency: string;
            account: string;
            balance: number;
        };
    } & {
        id: string;
        type: string;
        partnerId: string | null;
        userId: string;
        createdAt: Date;
        updatedAt: Date;
        companyId: string;
        description: string | null;
        method: string;
        amount: number;
        reference: string | null;
        referenceId: string | null;
        dueDate: Date | null;
        paidAt: Date | null;
        fees: number;
        invoiceId: string | null;
        bankAccountId: string | null;
    }>;
    updatePayment(id: string, updatePaymentDto: UpdatePaymentDto): Promise<{
        partner: {
            id: string;
            type: string;
            createdAt: Date;
            updatedAt: Date;
            deletedAt: Date | null;
            companyId: string;
            name: string;
            document: string;
            ie: string | null;
            im: string | null;
            email: string | null;
            phone: string | null;
            address: import("@prisma/client/runtime/library").JsonValue | null;
            isActive: boolean;
        };
        user: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            deletedAt: Date | null;
            companyId: string;
            email: string;
            phone: string | null;
            isActive: boolean;
            password: string;
            firstName: string;
            lastName: string;
            lastLogin: Date | null;
            failedLogins: number;
            lockedUntil: Date | null;
            mfaEnabled: boolean;
            mfaSecret: string | null;
        };
        invoice: {
            number: string;
            id: string;
            type: string;
            status: string;
            partnerId: string | null;
            userId: string;
            total: number;
            tax: number;
            notes: string | null;
            createdAt: Date;
            updatedAt: Date;
            deletedAt: Date | null;
            companyId: string;
            dueDate: Date | null;
            paidAt: Date | null;
            xmlContent: string | null;
            xmlKey: string | null;
            orderId: string | null;
        };
        bankAccount: {
            id: string;
            type: string;
            createdAt: Date;
            updatedAt: Date;
            companyId: string;
            name: string;
            isActive: boolean;
            bank: string;
            agency: string;
            account: string;
            balance: number;
        };
    } & {
        id: string;
        type: string;
        partnerId: string | null;
        userId: string;
        createdAt: Date;
        updatedAt: Date;
        companyId: string;
        description: string | null;
        method: string;
        amount: number;
        reference: string | null;
        referenceId: string | null;
        dueDate: Date | null;
        paidAt: Date | null;
        fees: number;
        invoiceId: string | null;
        bankAccountId: string | null;
    }>;
    removePayment(id: string): Promise<{
        id: string;
        type: string;
        partnerId: string | null;
        userId: string;
        createdAt: Date;
        updatedAt: Date;
        companyId: string;
        description: string | null;
        method: string;
        amount: number;
        reference: string | null;
        referenceId: string | null;
        dueDate: Date | null;
        paidAt: Date | null;
        fees: number;
        invoiceId: string | null;
        bankAccountId: string | null;
    }>;
    getCashFlow(companyId: string, startDate?: Date, endDate?: Date): Promise<(import(".prisma/client").Prisma.PickEnumerable<import(".prisma/client").Prisma.PaymentGroupByOutputType, ("type" | "method")[]> & {
        _count: {
            id: number;
        };
        _sum: {
            amount: number;
        };
    })[]>;
    getFinancialNotifications(companyId: string): Promise<({
        order: {
            partner: {
                id: string;
                type: string;
                createdAt: Date;
                updatedAt: Date;
                deletedAt: Date | null;
                companyId: string;
                name: string;
                document: string;
                ie: string | null;
                im: string | null;
                email: string | null;
                phone: string | null;
                address: import("@prisma/client/runtime/library").JsonValue | null;
                isActive: boolean;
            };
            user: {
                id: string;
                createdAt: Date;
                updatedAt: Date;
                deletedAt: Date | null;
                companyId: string;
                email: string;
                phone: string | null;
                isActive: boolean;
                password: string;
                firstName: string;
                lastName: string;
                lastLogin: Date | null;
                failedLogins: number;
                lockedUntil: Date | null;
                mfaEnabled: boolean;
                mfaSecret: string | null;
            };
        } & {
            number: string;
            id: string;
            type: string;
            status: string;
            partnerId: string | null;
            userId: string;
            total: number;
            discount: number;
            tax: number;
            notes: string | null;
            orderDate: Date;
            validUntil: Date | null;
            createdAt: Date;
            updatedAt: Date;
            deletedAt: Date | null;
            companyId: string;
        };
        partner: {
            id: string;
            type: string;
            createdAt: Date;
            updatedAt: Date;
            deletedAt: Date | null;
            companyId: string;
            name: string;
            document: string;
            ie: string | null;
            im: string | null;
            email: string | null;
            phone: string | null;
            address: import("@prisma/client/runtime/library").JsonValue | null;
            isActive: boolean;
        };
        user: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            deletedAt: Date | null;
            companyId: string;
            email: string;
            phone: string | null;
            isActive: boolean;
            password: string;
            firstName: string;
            lastName: string;
            lastLogin: Date | null;
            failedLogins: number;
            lockedUntil: Date | null;
            mfaEnabled: boolean;
            mfaSecret: string | null;
        };
    } & {
        id: string;
        type: string;
        status: string;
        partnerId: string | null;
        userId: string;
        createdAt: Date;
        updatedAt: Date;
        companyId: string;
        description: string;
        amount: number;
        orderId: string;
    })[]>;
    approveFinancialNotification(notificationId: string, companyId: string): Promise<{
        id: string;
        type: string;
        partnerId: string | null;
        userId: string;
        createdAt: Date;
        updatedAt: Date;
        companyId: string;
        description: string | null;
        method: string;
        amount: number;
        reference: string | null;
        referenceId: string | null;
        dueDate: Date | null;
        paidAt: Date | null;
        fees: number;
        invoiceId: string | null;
        bankAccountId: string | null;
    }>;
    rejectFinancialNotification(notificationId: string, companyId: string): Promise<{
        id: string;
        type: string;
        status: string;
        partnerId: string | null;
        userId: string;
        createdAt: Date;
        updatedAt: Date;
        companyId: string;
        description: string;
        amount: number;
        orderId: string;
    }>;
    getCompanyBalance(companyId: string): Promise<{
        totalInbound: number;
        totalOutbound: number;
        balance: number;
    }>;
}
