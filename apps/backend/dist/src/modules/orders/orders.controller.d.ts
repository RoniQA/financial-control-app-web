import { OrdersService } from './orders.service';
import { CreateOrderDto } from './dto/create-order.dto';
import { UpdateOrderDto } from './dto/update-order.dto';
export declare class OrdersController {
    private readonly ordersService;
    constructor(ordersService: OrdersService);
    create(createOrderDto: CreateOrderDto): Promise<{
        user: {
            id: string;
            email: string;
            phone: string | null;
            createdAt: Date;
            updatedAt: Date;
            deletedAt: Date | null;
            password: string;
            firstName: string;
            lastName: string;
            isActive: boolean;
            lastLogin: Date | null;
            failedLogins: number;
            lockedUntil: Date | null;
            mfaEnabled: boolean;
            mfaSecret: string | null;
            companyId: string;
        };
        partner: {
            id: string;
            name: string;
            ie: string | null;
            email: string | null;
            phone: string | null;
            address: import("@prisma/client/runtime/library").JsonValue | null;
            createdAt: Date;
            updatedAt: Date;
            deletedAt: Date | null;
            isActive: boolean;
            companyId: string;
            type: string;
            document: string;
            im: string | null;
        };
        items: ({
            product: {
                id: string;
                name: string;
                createdAt: Date;
                updatedAt: Date;
                deletedAt: Date | null;
                description: string | null;
                isActive: boolean;
                companyId: string;
                sku: string;
                category: string | null;
                brand: string | null;
                model: string | null;
                variations: import("@prisma/client/runtime/library").JsonValue | null;
                ncm: string | null;
                cest: string | null;
                unit: string;
                weight: number | null;
                dimensions: import("@prisma/client/runtime/library").JsonValue | null;
                isService: boolean;
            };
        } & {
            id: string;
            productId: string;
            quantity: number;
            unitPrice: number;
            discount: number;
            tax: number;
            total: number;
            notes: string | null;
            orderId: string;
        })[];
    } & {
        number: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        deletedAt: Date | null;
        companyId: string;
        userId: string;
        type: string;
        discount: number;
        tax: number;
        total: number;
        notes: string | null;
        status: string;
        partnerId: string | null;
        validUntil: Date | null;
    }>;
    findAll(filters: any): Promise<({
        user: {
            id: string;
            email: string;
            phone: string | null;
            createdAt: Date;
            updatedAt: Date;
            deletedAt: Date | null;
            password: string;
            firstName: string;
            lastName: string;
            isActive: boolean;
            lastLogin: Date | null;
            failedLogins: number;
            lockedUntil: Date | null;
            mfaEnabled: boolean;
            mfaSecret: string | null;
            companyId: string;
        };
        partner: {
            id: string;
            name: string;
            ie: string | null;
            email: string | null;
            phone: string | null;
            address: import("@prisma/client/runtime/library").JsonValue | null;
            createdAt: Date;
            updatedAt: Date;
            deletedAt: Date | null;
            isActive: boolean;
            companyId: string;
            type: string;
            document: string;
            im: string | null;
        };
        items: ({
            product: {
                id: string;
                name: string;
                createdAt: Date;
                updatedAt: Date;
                deletedAt: Date | null;
                description: string | null;
                isActive: boolean;
                companyId: string;
                sku: string;
                category: string | null;
                brand: string | null;
                model: string | null;
                variations: import("@prisma/client/runtime/library").JsonValue | null;
                ncm: string | null;
                cest: string | null;
                unit: string;
                weight: number | null;
                dimensions: import("@prisma/client/runtime/library").JsonValue | null;
                isService: boolean;
            };
        } & {
            id: string;
            productId: string;
            quantity: number;
            unitPrice: number;
            discount: number;
            tax: number;
            total: number;
            notes: string | null;
            orderId: string;
        })[];
    } & {
        number: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        deletedAt: Date | null;
        companyId: string;
        userId: string;
        type: string;
        discount: number;
        tax: number;
        total: number;
        notes: string | null;
        status: string;
        partnerId: string | null;
        validUntil: Date | null;
    })[]>;
    findOne(id: string): Promise<{
        user: {
            id: string;
            email: string;
            phone: string | null;
            createdAt: Date;
            updatedAt: Date;
            deletedAt: Date | null;
            password: string;
            firstName: string;
            lastName: string;
            isActive: boolean;
            lastLogin: Date | null;
            failedLogins: number;
            lockedUntil: Date | null;
            mfaEnabled: boolean;
            mfaSecret: string | null;
            companyId: string;
        };
        partner: {
            id: string;
            name: string;
            ie: string | null;
            email: string | null;
            phone: string | null;
            address: import("@prisma/client/runtime/library").JsonValue | null;
            createdAt: Date;
            updatedAt: Date;
            deletedAt: Date | null;
            isActive: boolean;
            companyId: string;
            type: string;
            document: string;
            im: string | null;
        };
        items: ({
            product: {
                id: string;
                name: string;
                createdAt: Date;
                updatedAt: Date;
                deletedAt: Date | null;
                description: string | null;
                isActive: boolean;
                companyId: string;
                sku: string;
                category: string | null;
                brand: string | null;
                model: string | null;
                variations: import("@prisma/client/runtime/library").JsonValue | null;
                ncm: string | null;
                cest: string | null;
                unit: string;
                weight: number | null;
                dimensions: import("@prisma/client/runtime/library").JsonValue | null;
                isService: boolean;
            };
        } & {
            id: string;
            productId: string;
            quantity: number;
            unitPrice: number;
            discount: number;
            tax: number;
            total: number;
            notes: string | null;
            orderId: string;
        })[];
    } & {
        number: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        deletedAt: Date | null;
        companyId: string;
        userId: string;
        type: string;
        discount: number;
        tax: number;
        total: number;
        notes: string | null;
        status: string;
        partnerId: string | null;
        validUntil: Date | null;
    }>;
    update(id: string, updateOrderDto: UpdateOrderDto): Promise<{
        user: {
            id: string;
            email: string;
            phone: string | null;
            createdAt: Date;
            updatedAt: Date;
            deletedAt: Date | null;
            password: string;
            firstName: string;
            lastName: string;
            isActive: boolean;
            lastLogin: Date | null;
            failedLogins: number;
            lockedUntil: Date | null;
            mfaEnabled: boolean;
            mfaSecret: string | null;
            companyId: string;
        };
        partner: {
            id: string;
            name: string;
            ie: string | null;
            email: string | null;
            phone: string | null;
            address: import("@prisma/client/runtime/library").JsonValue | null;
            createdAt: Date;
            updatedAt: Date;
            deletedAt: Date | null;
            isActive: boolean;
            companyId: string;
            type: string;
            document: string;
            im: string | null;
        };
        items: ({
            product: {
                id: string;
                name: string;
                createdAt: Date;
                updatedAt: Date;
                deletedAt: Date | null;
                description: string | null;
                isActive: boolean;
                companyId: string;
                sku: string;
                category: string | null;
                brand: string | null;
                model: string | null;
                variations: import("@prisma/client/runtime/library").JsonValue | null;
                ncm: string | null;
                cest: string | null;
                unit: string;
                weight: number | null;
                dimensions: import("@prisma/client/runtime/library").JsonValue | null;
                isService: boolean;
            };
        } & {
            id: string;
            productId: string;
            quantity: number;
            unitPrice: number;
            discount: number;
            tax: number;
            total: number;
            notes: string | null;
            orderId: string;
        })[];
    } & {
        number: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        deletedAt: Date | null;
        companyId: string;
        userId: string;
        type: string;
        discount: number;
        tax: number;
        total: number;
        notes: string | null;
        status: string;
        partnerId: string | null;
        validUntil: Date | null;
    }>;
    remove(id: string): Promise<{
        number: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        deletedAt: Date | null;
        companyId: string;
        userId: string;
        type: string;
        discount: number;
        tax: number;
        total: number;
        notes: string | null;
        status: string;
        partnerId: string | null;
        validUntil: Date | null;
    }>;
}
